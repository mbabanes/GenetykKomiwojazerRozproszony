//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientZGUI.GeneticService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Point", Namespace="http://schemas.datacontract.org/2004/07/GeneticWCF")]
    [System.SerializableAttribute()]
    public partial class Point : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int xField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int yField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int x {
            get {
                return this.xField;
            }
            set {
                if ((this.xField.Equals(value) != true)) {
                    this.xField = value;
                    this.RaisePropertyChanged("x");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int y {
            get {
                return this.yField;
            }
            set {
                if ((this.yField.Equals(value) != true)) {
                    this.yField = value;
                    this.RaisePropertyChanged("y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Result", Namespace="http://schemas.datacontract.org/2004/07/GeneticWCF")]
    [System.SerializableAttribute()]
    public partial class Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[][] populationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long timeOfCountingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] waysField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[][] population {
            get {
                return this.populationField;
            }
            set {
                if ((object.ReferenceEquals(this.populationField, value) != true)) {
                    this.populationField = value;
                    this.RaisePropertyChanged("population");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long timeOfCounting {
            get {
                return this.timeOfCountingField;
            }
            set {
                if ((this.timeOfCountingField.Equals(value) != true)) {
                    this.timeOfCountingField = value;
                    this.RaisePropertyChanged("timeOfCounting");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] ways {
            get {
                return this.waysField;
            }
            set {
                if ((object.ReferenceEquals(this.waysField, value) != true)) {
                    this.waysField = value;
                    this.RaisePropertyChanged("ways");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GeneticService.IGenetic")]
    public interface IGenetic {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenetic/startAlg", ReplyAction="http://tempuri.org/IGenetic/startAlgResponse")]
        ClientZGUI.GeneticService.Result startAlg(int countOfPoints, ClientZGUI.GeneticService.Point[] points, int startPoint, int lengthOfPopulation, int countOfGenerations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenetic/startAlg", ReplyAction="http://tempuri.org/IGenetic/startAlgResponse")]
        System.Threading.Tasks.Task<ClientZGUI.GeneticService.Result> startAlgAsync(int countOfPoints, ClientZGUI.GeneticService.Point[] points, int startPoint, int lengthOfPopulation, int countOfGenerations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenetic/startAlgWithPopulation", ReplyAction="http://tempuri.org/IGenetic/startAlgWithPopulationResponse")]
        ClientZGUI.GeneticService.Result startAlgWithPopulation(int countOfPoints, ClientZGUI.GeneticService.Point[] points, int startPoint, int lengthOfPopulation, int countOfGenerations, int[][] population);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGenetic/startAlgWithPopulation", ReplyAction="http://tempuri.org/IGenetic/startAlgWithPopulationResponse")]
        System.Threading.Tasks.Task<ClientZGUI.GeneticService.Result> startAlgWithPopulationAsync(int countOfPoints, ClientZGUI.GeneticService.Point[] points, int startPoint, int lengthOfPopulation, int countOfGenerations, int[][] population);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGeneticChannel : ClientZGUI.GeneticService.IGenetic, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GeneticClient : System.ServiceModel.ClientBase<ClientZGUI.GeneticService.IGenetic>, ClientZGUI.GeneticService.IGenetic {
        
        public GeneticClient() {
        }
        
        public GeneticClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GeneticClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GeneticClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GeneticClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ClientZGUI.GeneticService.Result startAlg(int countOfPoints, ClientZGUI.GeneticService.Point[] points, int startPoint, int lengthOfPopulation, int countOfGenerations) {
            return base.Channel.startAlg(countOfPoints, points, startPoint, lengthOfPopulation, countOfGenerations);
        }
        
        public System.Threading.Tasks.Task<ClientZGUI.GeneticService.Result> startAlgAsync(int countOfPoints, ClientZGUI.GeneticService.Point[] points, int startPoint, int lengthOfPopulation, int countOfGenerations) {
            return base.Channel.startAlgAsync(countOfPoints, points, startPoint, lengthOfPopulation, countOfGenerations);
        }
        
        public ClientZGUI.GeneticService.Result startAlgWithPopulation(int countOfPoints, ClientZGUI.GeneticService.Point[] points, int startPoint, int lengthOfPopulation, int countOfGenerations, int[][] population) {
            return base.Channel.startAlgWithPopulation(countOfPoints, points, startPoint, lengthOfPopulation, countOfGenerations, population);
        }
        
        public System.Threading.Tasks.Task<ClientZGUI.GeneticService.Result> startAlgWithPopulationAsync(int countOfPoints, ClientZGUI.GeneticService.Point[] points, int startPoint, int lengthOfPopulation, int countOfGenerations, int[][] population) {
            return base.Channel.startAlgWithPopulationAsync(countOfPoints, points, startPoint, lengthOfPopulation, countOfGenerations, population);
        }
    }
}
